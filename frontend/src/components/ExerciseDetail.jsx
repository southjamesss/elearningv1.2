import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";

const ExerciseDetail = () => {
  const { id } = useParams(); // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ id ‡∏à‡∏≤‡∏Å URL
  const navigate = useNavigate();
  const [exercise, setExercise] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [answers, setAnswers] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [score, setScore] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß

  useEffect(() => {
    const fetchExercise = async () => {
      try {
        console.log("üì° Fetching exercise data for ID:", id);
        const response = await fetch(`http://localhost:4000/api/exercises/${id}`);

        if (!response.ok) {
          throw new Error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö (Error: ${response.status})`);
        }

        const data = await response.json();
        console.log("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", data);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á options ‡∏à‡∏≤‡∏Å JSON string ‡πÄ‡∏õ‡πá‡∏ô Object
        const formattedExercise = {
          ...data,
          questions: data.questions.map(q => ({
            ...q,
            options: typeof q.options === "string" ? JSON.parse(q.options) : q.options || {},
          })),
        };

        setExercise(formattedExercise);
        setAnswers({}); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
      } catch (err) {
        console.error("‚ùå Fetch Error:", err.message);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchExercise();
  }, [id]);

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
  const handleAnswerChange = (questionIndex, answer) => {
    setAnswers({
      ...answers,
      [questionIndex]: answer, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    });
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const checkAnswers = () => {
    let correctCount = 0;
    exercise.questions.forEach((question, index) => {
      if (answers[index] === question.correctAnswer) {
        correctCount++;
      }
    });

    setScore(correctCount); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  };

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
  const resetQuiz = () => {
    setAnswers({});
    setScore(null);
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-6">
      <div className="bg-white p-10 rounded-xl shadow-lg max-w-3xl w-full">
        {loading && <p className="text-blue-500 text-lg">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö...</p>}
        {error && <p className="text-red-500 text-lg">{error}</p>}

        {!loading && !error && exercise && (
          <>
            <h1 className="text-3xl font-bold text-gray-800">{exercise.title}</h1>
            <p className="mt-4 text-gray-600">{exercise.description}</p>

            {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° */}
            <div className="mt-6">
              {exercise.questions && exercise.questions.length > 0 ? (
                <ul className="list-disc list-inside">
                  {exercise.questions.map((question, index) => (
                    <li key={index} className="mt-2 text-gray-700">
                      <strong>‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {index + 1}:</strong> {question.questionText}
                      <div className="ml-4 mt-2">
                        {Object.entries(question.options).map(([key, value]) => (
                          <label key={key} className="block">
                            <input
                              type="radio"
                              name={`question-${index}`}
                              value={key}
                              checked={answers[index] === key}
                              onChange={() => handleAnswerChange(index, key)}
                              className="mr-2"
                            />
                            <strong>{key.toUpperCase()}:</strong> {value}
                          </label>
                        ))}
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ</p>
              )}
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö */}
            {score !== null && (
              <div className="mt-6 p-4 bg-green-100 border-l-4 border-green-500 text-green-800 rounded">
                ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: <strong>{score}</strong> / {exercise.questions.length}
              </div>
            )}

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö */}
            {score === null ? (
              <button
                className="mt-6 px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-lg hover:bg-blue-700 transition"
                onClick={checkAnswers}
              >
                ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
              </button>
            ) : (
              // ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
              <button
                className="mt-6 px-6 py-3 bg-yellow-500 text-white font-semibold rounded-lg shadow-lg hover:bg-yellow-600 transition"
                onClick={resetQuiz}
              >
                üîÑ ‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
              </button>
            )}

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
            <button
              className="mt-4 px-6 py-3 bg-red-500 text-white font-semibold rounded-lg shadow-lg hover:bg-red-700 transition"
              onClick={() => navigate("/exercises")}
            >
              üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default ExerciseDetail;