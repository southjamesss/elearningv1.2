import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const AdminExercises = () => {
    const navigate = useNavigate();
    const [exercises, setExercises] = useState([]);
    const [newExercise, setNewExercise] = useState({
        title: "",
        description: "",
        questions: [
            { questionText: "", options: { a: "", b: "", c: "", d: "" }, correctAnswer: "a" },
        ],
    });
    const [editingExercise, setEditingExercise] = useState(null);
    const [loading, setLoading] = useState(false);

    // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏à‡∏≤‡∏Å API
    useEffect(() => {
        fetchExercises();
    }, []);

    const fetchExercises = async () => {
        setLoading(true);
        try {
            const response = await fetch("http://localhost:4000/api/exercises");
            const data = await response.json();
            setExercises(data);
        } catch (error) {
            console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
        }
        setLoading(false);
    };

    // üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
    const saveExercise = async () => {
        if (newExercise.title.trim() && newExercise.description.trim()) {
            setLoading(true);
            try {
                if (editingExercise) {
                    // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
                    const response = await fetch(`http://localhost:4000/api/exercises/${editingExercise.id}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(newExercise),
                    });
                    const updatedData = await response.json();
                    setExercises(exercises.map(ex => ex.id === updatedData.id ? updatedData : ex));
                    setEditingExercise(null);
                } else {
                    // üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
                    const response = await fetch("http://localhost:4000/api/exercises", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(newExercise),
                    });
                    const data = await response.json();
                    setExercises([...exercises, data]);
                }

                // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
                setNewExercise({
                    title: "",
                    description: "",
                    questions: [{ questionText: "", options: { a: "", b: "", c: "", d: "" }, correctAnswer: "a" }],
                });
            } catch (error) {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡πÑ‡∏î‡πâ:", error);
            }
            setLoading(false);
        }
    };

    // üìå ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
    const deleteExercise = async (id) => {
        if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
        setLoading(true);
        try {
            await fetch(`http://localhost:4000/api/exercises/${id}`, { method: "DELETE" });
            setExercises(exercises.filter((exercise) => exercise.id !== id));
        } catch (error) {
            console.error("‚ùå ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
        }
        setLoading(false);
    };

    // üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
    const startEditing = (exercise) => {
        setNewExercise(exercise);
        setEditingExercise(exercise);
    };

    // üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    const addNewQuestion = () => {
        setNewExercise({
            ...newExercise,
            questions: [
                ...newExercise.questions,
                { questionText: "", options: { a: "", b: "", c: "", d: "" }, correctAnswer: "a" },
            ],
        });
    };

    return (
        <div className="p-10 bg-gray-100 min-h-screen flex flex-row gap-10">
            {/* üìå ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î (‡∏ã‡πâ‡∏≤‡∏¢‡∏°‡∏∑‡∏≠) */}
            <div className="bg-white p-6 rounded-lg shadow-lg w-1/3">
                <h2 className="text-2xl font-semibold mb-4 text-gray-800">
                    {editingExercise ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î"}
                </h2>

                {/* üìå ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î */}
                <input
                    type="text"
                    value={newExercise.title}
                    onChange={(e) => setNewExercise({ ...newExercise, title: e.target.value })}
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î"
                    className="p-3 border rounded-lg w-full mb-3 shadow-sm"
                />

                {/* üìå ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ */}
                <textarea
                    value={newExercise.description}
                    onChange={(e) => setNewExercise({ ...newExercise, description: e.target.value })}
                    placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
                    className="p-3 border rounded-lg w-full mb-3 shadow-sm"
                    rows="2"
                />

                {/* üìå ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° */}
                <h3 className="text-lg font-semibold text-gray-800 mb-2">üìå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</h3>
                {newExercise.questions.map((question, index) => (
                    <div key={index} className="border p-4 rounded-lg bg-gray-50 mb-3">

                        {/* üìå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° */}
                        <input
                            type="text"
                            value={question.questionText}
                            onChange={(e) => setNewExercise({
                                ...newExercise,
                                questions: newExercise.questions.map((q, i) =>
                                    i === index ? { ...q, questionText: e.target.value } : q
                                ),
                            })}
                            placeholder={`‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà ${index + 1}`}
                            className="p-2 border rounded-lg w-full mb-3 shadow-sm"
                        />

                        {/* üìå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå */}
                        <h4 className="text-sm font-semibold text-gray-700">üîπ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</h4>
                        {["a", "b", "c", "d"].map((key) => (
                            <input
                                key={key}
                                type="text"
                                value={question.options[key]}
                                onChange={(e) =>
                                    setNewExercise({
                                        ...newExercise,
                                        questions: newExercise.questions.map((q, i) =>
                                            i === index
                                                ? { ...q, options: { ...q.options, [key]: e.target.value } }
                                                : q
                                        ),
                                    })
                                }
                                placeholder={`‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${key.toUpperCase()}`}
                                className="p-2 border rounded-lg w-full mt-1 shadow-sm"
                            />
                        ))}

                        {/* üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á */}
                        <label className="block mt-3 text-gray-700 font-semibold">
                            ‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
                            <select
                                value={question.correctAnswer}
                                onChange={(e) =>
                                    setNewExercise({
                                        ...newExercise,
                                        questions: newExercise.questions.map((q, i) =>
                                            i === index ? { ...q, correctAnswer: e.target.value } : q
                                        ),
                                    })
                                }
                                className="ml-2 border p-2 rounded-lg shadow-sm"
                            >
                                {["a", "b", "c", "d"].map((opt) => (
                                    <option key={opt} value={opt}>
                                        {opt.toUpperCase()}
                                    </option>
                                ))}
                            </select>
                        </label>
                    </div>
                ))}

                {/* üìå ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° */}
                <button
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 w-full mt-3"
                    onClick={() => setNewExercise({
                        ...newExercise,
                        questions: [...newExercise.questions, { questionText: "", options: { a: "", b: "", c: "", d: "" }, correctAnswer: "a" }],
                    })}
                >
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                </button>

                {/* üìå ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï */}
                <button
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 w-full mt-2"
                    onClick={saveExercise}
                >
                    ‚úîÔ∏è {editingExercise ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
                </button>
            </div>

            {/* üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î (‡∏Ç‡∏ß‡∏≤‡∏°‡∏∑‡∏≠) */}
            <div className="w-2/3">
                <h2 className="text-xl font-semibold text-gray-800 mb-4">üìö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î</h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    {exercises.map((exercise) => (
                        <div key={exercise.id} className="p-6 bg-white shadow-lg rounded-lg hover:shadow-xl transition">
                            <h3 className="text-lg font-bold">{exercise.title}</h3>
                            <p className="text-gray-700">{exercise.description}</p>
                            <div className="flex gap-2 mt-4">
                                <button className="px-3 py-1 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600" onClick={() => startEditing(exercise)}>
                                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                </button>
                                <button className="px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600" onClick={() => deleteExercise(exercise.id)}>
                                    ‚ùå ‡∏•‡∏ö
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö */}
            <button
                className="absolute top-5 right-5 px-6 py-3 bg-red-500 text-white rounded-lg shadow-lg hover:bg-red-700 transition"
                onClick={() => navigate("/admin")}
            >
                ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Admin
            </button>
        </div>
    );
};

export default AdminExercises;